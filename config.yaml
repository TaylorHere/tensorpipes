proxy:
  secretToken: "f38466f626312377813f9716649b32c20fcf07c44c80ef39b133a45ed25b7240"
singleuser:
  # Defines the default image
  serviceAccountName: argo
  extraEnv:
    EDITOR: "vim"
    GRANT_SUDO: "yes"
    user: "root"
  image:
    name: registry.cn-hangzhou.aliyuncs.com/taylor/tensorflow-argo
    tag: latest
  profileList:
    - display_name: "Tensorflow2 with CPU Server"
      description: "Tensorflow environment with CPU node"
      default: true
      kubespawner_override:
        image: registry.cn-hangzhou.aliyuncs.com/taylor/tensorflow-argo:latest
        extra_resource_limits:
          nvidia.com/gpu: "0"
    - display_name: "Tensorflow2 with GPU Server"
      description: "Spawns a notebook server with access to a GPU, the cluster must have a GPU node available"
      kubespawner_override:
        extra_resource_limits:
          nvidia.com/gpu: "1"
    - display_name: "Tensorflow2 with DUAL GPU Server, "
      description: "Spawns a notebook server with access to two GPUs, the cluster must have two GPU node available"
      kubespawner_override:
        extra_resource_limits:
          nvidia.com/gpu: "2"
    - display_name: "Tensorflow2 with Four GPU Server, "
      description: "Spawns a notebook server with access to Four GPUs, the cluster must have Four GPU node available"
      kubespawner_override:
        extra_resource_limits:
          nvidia.com/gpu: "4"
    - display_name: "Datascience environment"
      description: "If you want the additional bells and whistles: Python, R, and Julia."
      kubespawner_override:
        image: jupyter/datascience-notebook:2343e33dec46
    - display_name: "Minimal environment"
      description: "The Minimal Jupyter"
      kubespawner_override:
        image: jupyter/minimal-notebook
        extra_resource_limits:
          nvidia.com/gpu: "0"
  defaultUrl: "/lab"
  # storage:
  #   extraVolumes:
  #     - name: jupyterhub-shared
  #       persistentVolumeClaim:
  #         claimName: jupyterhub-shared-volume
  #         storageClassName: aliyun-cn-beijing-h
  #   extraVolumeMounts:
  #     - name: jupyterhub-shared
  #       mountPath: /home/shared

hub:
  extraConfig:
    myConfig.py: |
      c.KubeSpawner.cmd = ['jupyter-labhub']
      c.KubeSpawner.args = ['--allow-root']
      c.KubeSpawner.environment = {
        'GRANT_SUDO': '1',
        'UID': '0', # workaround https://github.com/jupyter/docker-stacks/pull/420
      }
      c.KubeSpawner.extra_create_kwargs = {'user': 'root'}
  uid: 0

auth:
  type: github
  admin:
    access: true
    users:
      - taylorhere
  github:
    clientId: "1f8fc2fac00d2ff098a4"
    clientSecret: "51efa9414c00f4f9861e089e56360975d0b2ba5d"
    callbackUrl: "http://39.105.244.138/hub/oauth_callback"






